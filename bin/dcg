#!/usr/bin/env python3

import argparse
import logging
from dots.code_generator import DotsCodeGenerator
import dots.outputs
import sys

"""
DOTS code generator

Normal operation: Read DOTS-files and generate output-files (source-code) from language-specific templates.
* Can generate one or more output-files per DOTS type (enum or struct)
* Can generate one output-file, from all read DOTS type (and files)

"""


parser = argparse.ArgumentParser(description="DOTS code generator")
parser.add_argument('dots_files', metavar='DOTS_FILES', type=str, nargs='*',
                    help="Input files")
parser.add_argument('--sum', dest='accumulate', action='store_const',
                    const=sum, default=max,
                    help='sum the integers (default: find the max)')

parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
parser.add_argument("-V", "--version", action="store_true", help="Display version")

parser.add_argument("-D", "--define", type=str, help="Add definition for generator")

parser.add_argument('--config', metavar='FILE', dest='config', help="Output configuration")
parser.add_argument("-o", "--output-path", dest="output_path", default=".",
                    help="Path of generated files")
parser.add_argument("-M", "--list-generated", dest="list_generated", action="store_true", default=False,
                   help="list generated output files")
parser.add_argument("-C", "--write-changed-only", default=False, action="store_true",
                    help="Only write generated files, when the content has changed compared to an existing file")
parser.add_argument("-O", "--output", metavar='OUTPUT', type=str, default="template",
                    help="Choose output generator")
parser.add_argument("--list-outputs", action="store_true", help="List available output generators")

# Display output-generator specific options

parser.add_argument("-S", "--single-output", action="store_true",
                    help="combine files into a single output file (is supported by generator)")
parser.add_argument("-T", "--template-path", metavar="DIR", help="Path to directory with template-files")

args = parser.parse_args()
# print(args.accumulate(args.blah))

numeric_level = getattr(logging, "INFO", None)

logging.basicConfig(level=numeric_level)

dcg = DotsCodeGenerator()

if args.list_outputs:
    outputs = dots.outputs.list_outputs()
    for output in outputs:
        print(output)
    sys.exit(0)

print("Process DOTS-files:", args.dots_files)

dcg.read_input_files(args.dots_files)
user_types = dcg.type_registry.get_user_types()
print("All known user-types")
for t in user_types:
    print("  " + t)

if args.output == "desciptor":
    output = dots.outputs.Descripor(user_types, args.output_path)
elif args.output == "template":
    output = dots.outputs.Template(user_types, args.output_path)
else:
    logging.ERROR("unknown output '%s'" % args.output)

if args.list_generated:
    files = output.list_generated_files()
    for file in files:
        print(file)
    sys.exit(0)

print()
print("Unresolved types")
print(dcg.type_registry.get_unresolved_types())

output.generate()
